/* tslint:disable */
/* eslint-disable */
/**
 * Ory Identities API
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v0.11.1
 * Contact: office@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Update Registration Flow with Password Method
 * @export
 * @interface UpdateRegistrationFlowWithPasswordMethod
 */
export interface UpdateRegistrationFlowWithPasswordMethod {
    /**
     * The CSRF Token
     * @type {string}
     * @memberof UpdateRegistrationFlowWithPasswordMethod
     */
    csrf_token?: string;
    /**
     * Method to use
     * 
     * This field must be set to `password` when using the password method.
     * @type {string}
     * @memberof UpdateRegistrationFlowWithPasswordMethod
     */
    method: string;
    /**
     * Password to sign the user up with
     * @type {string}
     * @memberof UpdateRegistrationFlowWithPasswordMethod
     */
    password: string;
    /**
     * The identity's traits
     * @type {object}
     * @memberof UpdateRegistrationFlowWithPasswordMethod
     */
    traits: object;
}

/**
 * Check if a given object implements the UpdateRegistrationFlowWithPasswordMethod interface.
 */
export function instanceOfUpdateRegistrationFlowWithPasswordMethod(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "method" in value;
    isInstance = isInstance && "password" in value;
    isInstance = isInstance && "traits" in value;

    return isInstance;
}

export function UpdateRegistrationFlowWithPasswordMethodFromJSON(json: any): UpdateRegistrationFlowWithPasswordMethod {
    return UpdateRegistrationFlowWithPasswordMethodFromJSONTyped(json, false);
}

export function UpdateRegistrationFlowWithPasswordMethodFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateRegistrationFlowWithPasswordMethod {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'csrf_token': !exists(json, 'csrf_token') ? undefined : json['csrf_token'],
        'method': json['method'],
        'password': json['password'],
        'traits': json['traits'],
    };
}

export function UpdateRegistrationFlowWithPasswordMethodToJSON(value?: UpdateRegistrationFlowWithPasswordMethod | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'csrf_token': value.csrf_token,
        'method': value.method,
        'password': value.password,
        'traits': value.traits,
    };
}

