/* tslint:disable */
/* eslint-disable */
/**
 * Ory Identities API
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v0.11.1
 * Contact: office@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthenticatorAssuranceLevel } from './AuthenticatorAssuranceLevel';
import {
    AuthenticatorAssuranceLevelFromJSON,
    AuthenticatorAssuranceLevelFromJSONTyped,
    AuthenticatorAssuranceLevelToJSON,
} from './AuthenticatorAssuranceLevel';
import type { IdentityCredentialsType } from './IdentityCredentialsType';
import {
    IdentityCredentialsTypeFromJSON,
    IdentityCredentialsTypeFromJSONTyped,
    IdentityCredentialsTypeToJSON,
} from './IdentityCredentialsType';
import type { OAuth2LoginRequest } from './OAuth2LoginRequest';
import {
    OAuth2LoginRequestFromJSON,
    OAuth2LoginRequestFromJSONTyped,
    OAuth2LoginRequestToJSON,
} from './OAuth2LoginRequest';
import type { UiContainer } from './UiContainer';
import {
    UiContainerFromJSON,
    UiContainerFromJSONTyped,
    UiContainerToJSON,
} from './UiContainer';

/**
 * This object represents a login flow. A login flow is initiated at the "Initiate Login API / Browser Flow"
 * endpoint by a client.
 * 
 * Once a login flow is completed successfully, a session cookie or session token will be issued.
 * @export
 * @interface LoginFlow
 */
export interface LoginFlow {
    /**
     * 
     * @type {IdentityCredentialsType}
     * @memberof LoginFlow
     */
    active?: IdentityCredentialsType;
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {Date}
     * @memberof LoginFlow
     */
    created_at?: Date;
    /**
     * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in,
     * a new flow has to be initiated.
     * @type {Date}
     * @memberof LoginFlow
     */
    expires_at: Date;
    /**
     * ID represents the flow's unique ID. When performing the login flow, this
     * represents the id in the login UI's query parameter: http://<selfservice.flows.login.ui_url>/?flow=<flow_id>
     * @type {string}
     * @memberof LoginFlow
     */
    id: string;
    /**
     * IssuedAt is the time (UTC) when the flow started.
     * @type {Date}
     * @memberof LoginFlow
     */
    issued_at: Date;
    /**
     * 
     * @type {string}
     * @memberof LoginFlow
     */
    oauth2_login_challenge?: string | null;
    /**
     * 
     * @type {OAuth2LoginRequest}
     * @memberof LoginFlow
     */
    oauth2_login_request?: OAuth2LoginRequest;
    /**
     * Refresh stores whether this login flow should enforce re-authentication.
     * @type {boolean}
     * @memberof LoginFlow
     */
    refresh?: boolean;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used
     * to forward information contained in the URL's path or query for example.
     * @type {string}
     * @memberof LoginFlow
     */
    request_url: string;
    /**
     * 
     * @type {AuthenticatorAssuranceLevel}
     * @memberof LoginFlow
     */
    requested_aal?: AuthenticatorAssuranceLevel;
    /**
     * ReturnTo contains the requested return_to URL.
     * @type {string}
     * @memberof LoginFlow
     */
    return_to?: string;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof LoginFlow
     */
    type: string;
    /**
     * 
     * @type {UiContainer}
     * @memberof LoginFlow
     */
    ui: UiContainer;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {Date}
     * @memberof LoginFlow
     */
    updated_at?: Date;
}

/**
 * Check if a given object implements the LoginFlow interface.
 */
export function instanceOfLoginFlow(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "expires_at" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "issued_at" in value;
    isInstance = isInstance && "request_url" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "ui" in value;

    return isInstance;
}

export function LoginFlowFromJSON(json: any): LoginFlow {
    return LoginFlowFromJSONTyped(json, false);
}

export function LoginFlowFromJSONTyped(json: any, ignoreDiscriminator: boolean): LoginFlow {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': !exists(json, 'active') ? undefined : IdentityCredentialsTypeFromJSON(json['active']),
        'created_at': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'expires_at': (new Date(json['expires_at'])),
        'id': json['id'],
        'issued_at': (new Date(json['issued_at'])),
        'oauth2_login_challenge': !exists(json, 'oauth2_login_challenge') ? undefined : json['oauth2_login_challenge'],
        'oauth2_login_request': !exists(json, 'oauth2_login_request') ? undefined : OAuth2LoginRequestFromJSON(json['oauth2_login_request']),
        'refresh': !exists(json, 'refresh') ? undefined : json['refresh'],
        'request_url': json['request_url'],
        'requested_aal': !exists(json, 'requested_aal') ? undefined : AuthenticatorAssuranceLevelFromJSON(json['requested_aal']),
        'return_to': !exists(json, 'return_to') ? undefined : json['return_to'],
        'type': json['type'],
        'ui': UiContainerFromJSON(json['ui']),
        'updated_at': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
    };
}

export function LoginFlowToJSON(value?: LoginFlow | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': IdentityCredentialsTypeToJSON(value.active),
        'created_at': value.created_at === undefined ? undefined : (value.created_at.toISOString()),
        'expires_at': (value.expires_at.toISOString()),
        'id': value.id,
        'issued_at': (value.issued_at.toISOString()),
        'oauth2_login_challenge': value.oauth2_login_challenge,
        'oauth2_login_request': OAuth2LoginRequestToJSON(value.oauth2_login_request),
        'refresh': value.refresh,
        'request_url': value.request_url,
        'requested_aal': AuthenticatorAssuranceLevelToJSON(value.requested_aal),
        'return_to': value.return_to,
        'type': value.type,
        'ui': UiContainerToJSON(value.ui),
        'updated_at': value.updated_at === undefined ? undefined : (value.updated_at.toISOString()),
    };
}

