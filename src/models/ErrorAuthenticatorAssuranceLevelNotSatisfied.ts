/* tslint:disable */
/* eslint-disable */
/**
 * Ory Identities API
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v0.11.1
 * Contact: office@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ErrorAuthenticatorAssuranceLevelNotSatisfied
 */
export interface ErrorAuthenticatorAssuranceLevelNotSatisfied {
    /**
     * The status code
     * @type {number}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    code?: number;
    /**
     * Debug information
     * 
     * This field is often not exposed to protect against leaking
     * sensitive information.
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    debug?: string;
    /**
     * Further error details
     * @type {{ [key: string]: any; }}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    details?: { [key: string]: any; };
    /**
     * The error ID
     * 
     * Useful when trying to identify various errors in application logic.
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    id?: string;
    /**
     * Error message
     * 
     * The error's message.
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    message: string;
    /**
     * A human-readable reason for the error
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    reason?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    redirect_browser_to?: string;
    /**
     * The request ID
     * 
     * The request ID is often exposed internally in order to trace
     * errors across service architectures. This is often a UUID.
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    request?: string;
    /**
     * The status description
     * @type {string}
     * @memberof ErrorAuthenticatorAssuranceLevelNotSatisfied
     */
    status?: string;
}

/**
 * Check if a given object implements the ErrorAuthenticatorAssuranceLevelNotSatisfied interface.
 */
export function instanceOfErrorAuthenticatorAssuranceLevelNotSatisfied(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "message" in value;

    return isInstance;
}

export function ErrorAuthenticatorAssuranceLevelNotSatisfiedFromJSON(json: any): ErrorAuthenticatorAssuranceLevelNotSatisfied {
    return ErrorAuthenticatorAssuranceLevelNotSatisfiedFromJSONTyped(json, false);
}

export function ErrorAuthenticatorAssuranceLevelNotSatisfiedFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorAuthenticatorAssuranceLevelNotSatisfied {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'debug': !exists(json, 'debug') ? undefined : json['debug'],
        'details': !exists(json, 'details') ? undefined : json['details'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'message': json['message'],
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'redirect_browser_to': !exists(json, 'redirect_browser_to') ? undefined : json['redirect_browser_to'],
        'request': !exists(json, 'request') ? undefined : json['request'],
        'status': !exists(json, 'status') ? undefined : json['status'],
    };
}

export function ErrorAuthenticatorAssuranceLevelNotSatisfiedToJSON(value?: ErrorAuthenticatorAssuranceLevelNotSatisfied | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'debug': value.debug,
        'details': value.details,
        'id': value.id,
        'message': value.message,
        'reason': value.reason,
        'redirect_browser_to': value.redirect_browser_to,
        'request': value.request,
        'status': value.status,
    };
}

