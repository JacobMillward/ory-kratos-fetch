/* tslint:disable */
/* eslint-disable */
/**
 * Ory Identities API
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v0.11.1
 * Contact: office@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IdentityCredentialsType } from './IdentityCredentialsType';
import {
    IdentityCredentialsTypeFromJSON,
    IdentityCredentialsTypeFromJSONTyped,
    IdentityCredentialsTypeToJSON,
} from './IdentityCredentialsType';
import type { OAuth2LoginRequest } from './OAuth2LoginRequest';
import {
    OAuth2LoginRequestFromJSON,
    OAuth2LoginRequestFromJSONTyped,
    OAuth2LoginRequestToJSON,
} from './OAuth2LoginRequest';
import type { UiContainer } from './UiContainer';
import {
    UiContainerFromJSON,
    UiContainerFromJSONTyped,
    UiContainerToJSON,
} from './UiContainer';

/**
 * 
 * @export
 * @interface RegistrationFlow
 */
export interface RegistrationFlow {
    /**
     * 
     * @type {IdentityCredentialsType}
     * @memberof RegistrationFlow
     */
    active?: IdentityCredentialsType;
    /**
     * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in,
     * a new flow has to be initiated.
     * @type {Date}
     * @memberof RegistrationFlow
     */
    expires_at: Date;
    /**
     * ID represents the flow's unique ID. When performing the registration flow, this
     * represents the id in the registration ui's query parameter: http://<selfservice.flows.registration.ui_url>/?flow=<id>
     * @type {string}
     * @memberof RegistrationFlow
     */
    id: string;
    /**
     * IssuedAt is the time (UTC) when the flow occurred.
     * @type {Date}
     * @memberof RegistrationFlow
     */
    issued_at: Date;
    /**
     * 
     * @type {string}
     * @memberof RegistrationFlow
     */
    oauth2_login_challenge?: string | null;
    /**
     * 
     * @type {OAuth2LoginRequest}
     * @memberof RegistrationFlow
     */
    oauth2_login_request?: OAuth2LoginRequest;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used
     * to forward information contained in the URL's path or query for example.
     * @type {string}
     * @memberof RegistrationFlow
     */
    request_url: string;
    /**
     * ReturnTo contains the requested return_to URL.
     * @type {string}
     * @memberof RegistrationFlow
     */
    return_to?: string;
    /**
     * The flow type can either be `api` or `browser`.
     * @type {string}
     * @memberof RegistrationFlow
     */
    type: string;
    /**
     * 
     * @type {UiContainer}
     * @memberof RegistrationFlow
     */
    ui: UiContainer;
}

/**
 * Check if a given object implements the RegistrationFlow interface.
 */
export function instanceOfRegistrationFlow(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "expires_at" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "issued_at" in value;
    isInstance = isInstance && "request_url" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "ui" in value;

    return isInstance;
}

export function RegistrationFlowFromJSON(json: any): RegistrationFlow {
    return RegistrationFlowFromJSONTyped(json, false);
}

export function RegistrationFlowFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegistrationFlow {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': !exists(json, 'active') ? undefined : IdentityCredentialsTypeFromJSON(json['active']),
        'expires_at': (new Date(json['expires_at'])),
        'id': json['id'],
        'issued_at': (new Date(json['issued_at'])),
        'oauth2_login_challenge': !exists(json, 'oauth2_login_challenge') ? undefined : json['oauth2_login_challenge'],
        'oauth2_login_request': !exists(json, 'oauth2_login_request') ? undefined : OAuth2LoginRequestFromJSON(json['oauth2_login_request']),
        'request_url': json['request_url'],
        'return_to': !exists(json, 'return_to') ? undefined : json['return_to'],
        'type': json['type'],
        'ui': UiContainerFromJSON(json['ui']),
    };
}

export function RegistrationFlowToJSON(value?: RegistrationFlow | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': IdentityCredentialsTypeToJSON(value.active),
        'expires_at': (value.expires_at.toISOString()),
        'id': value.id,
        'issued_at': (value.issued_at.toISOString()),
        'oauth2_login_challenge': value.oauth2_login_challenge,
        'oauth2_login_request': OAuth2LoginRequestToJSON(value.oauth2_login_request),
        'request_url': value.request_url,
        'return_to': value.return_to,
        'type': value.type,
        'ui': UiContainerToJSON(value.ui),
    };
}

