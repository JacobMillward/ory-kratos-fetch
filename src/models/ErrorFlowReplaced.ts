/* tslint:disable */
/* eslint-disable */
/**
 * Ory Identities API
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v0.11.1
 * Contact: office@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Is sent when a flow is replaced by a different flow of the same class
 * @export
 * @interface ErrorFlowReplaced
 */
export interface ErrorFlowReplaced {
    /**
     * The status code
     * @type {number}
     * @memberof ErrorFlowReplaced
     */
    code?: number;
    /**
     * Debug information
     * 
     * This field is often not exposed to protect against leaking
     * sensitive information.
     * @type {string}
     * @memberof ErrorFlowReplaced
     */
    debug?: string;
    /**
     * Further error details
     * @type {{ [key: string]: any; }}
     * @memberof ErrorFlowReplaced
     */
    details?: { [key: string]: any; };
    /**
     * The error ID
     * 
     * Useful when trying to identify various errors in application logic.
     * @type {string}
     * @memberof ErrorFlowReplaced
     */
    id?: string;
    /**
     * Error message
     * 
     * The error's message.
     * @type {string}
     * @memberof ErrorFlowReplaced
     */
    message: string;
    /**
     * A human-readable reason for the error
     * @type {string}
     * @memberof ErrorFlowReplaced
     */
    reason?: string;
    /**
     * The request ID
     * 
     * The request ID is often exposed internally in order to trace
     * errors across service architectures. This is often a UUID.
     * @type {string}
     * @memberof ErrorFlowReplaced
     */
    request?: string;
    /**
     * The status description
     * @type {string}
     * @memberof ErrorFlowReplaced
     */
    status?: string;
    /**
     * The flow ID that should be used for the new flow as it contains the correct messages.
     * @type {string}
     * @memberof ErrorFlowReplaced
     */
    use_flow_id?: string;
}

/**
 * Check if a given object implements the ErrorFlowReplaced interface.
 */
export function instanceOfErrorFlowReplaced(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "message" in value;

    return isInstance;
}

export function ErrorFlowReplacedFromJSON(json: any): ErrorFlowReplaced {
    return ErrorFlowReplacedFromJSONTyped(json, false);
}

export function ErrorFlowReplacedFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorFlowReplaced {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'debug': !exists(json, 'debug') ? undefined : json['debug'],
        'details': !exists(json, 'details') ? undefined : json['details'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'message': json['message'],
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'request': !exists(json, 'request') ? undefined : json['request'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'use_flow_id': !exists(json, 'use_flow_id') ? undefined : json['use_flow_id'],
    };
}

export function ErrorFlowReplacedToJSON(value?: ErrorFlowReplaced | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'debug': value.debug,
        'details': value.details,
        'id': value.id,
        'message': value.message,
        'reason': value.reason,
        'request': value.request,
        'status': value.status,
        'use_flow_id': value.use_flow_id,
    };
}

