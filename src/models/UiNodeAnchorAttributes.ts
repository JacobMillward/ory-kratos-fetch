/* tslint:disable */
/* eslint-disable */
/**
 * Ory Identities API
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * The version of the OpenAPI document: v0.11.1
 * Contact: office@ory.sh
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UiText } from './UiText';
import {
    UiTextFromJSON,
    UiTextFromJSONTyped,
    UiTextToJSON,
} from './UiText';

/**
 * 
 * @export
 * @interface UiNodeAnchorAttributes
 */
export interface UiNodeAnchorAttributes {
    /**
     * The link's href (destination) URL.
     * 
     * format: uri
     * @type {string}
     * @memberof UiNodeAnchorAttributes
     */
    href: string;
    /**
     * A unique identifier
     * @type {string}
     * @memberof UiNodeAnchorAttributes
     */
    id: string;
    /**
     * NodeType represents this node's types. It is a mirror of `node.type` and
     * is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "a".
     * @type {string}
     * @memberof UiNodeAnchorAttributes
     */
    node_type: string;
    /**
     * 
     * @type {UiText}
     * @memberof UiNodeAnchorAttributes
     */
    title: UiText;
}

/**
 * Check if a given object implements the UiNodeAnchorAttributes interface.
 */
export function instanceOfUiNodeAnchorAttributes(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "href" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "node_type" in value;
    isInstance = isInstance && "title" in value;

    return isInstance;
}

export function UiNodeAnchorAttributesFromJSON(json: any): UiNodeAnchorAttributes {
    return UiNodeAnchorAttributesFromJSONTyped(json, false);
}

export function UiNodeAnchorAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): UiNodeAnchorAttributes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'href': json['href'],
        'id': json['id'],
        'node_type': json['node_type'],
        'title': UiTextFromJSON(json['title']),
    };
}

export function UiNodeAnchorAttributesToJSON(value?: UiNodeAnchorAttributes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'href': value.href,
        'id': value.id,
        'node_type': value.node_type,
        'title': UiTextToJSON(value.title),
    };
}

